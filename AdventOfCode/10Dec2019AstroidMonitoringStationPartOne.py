from Common import assertEqual
import math


def calculateVisibilityAngle(astroidA, astroidB):
    ax, ay = astroidA
    bx, by = astroidB
    return math.atan2((bx-ax), (by-ay))


assertEqual(math.atan2(2, 3), calculateVisibilityAngle((2, 3), (6, 9)))
assertEqual(math.atan2(0, 1), calculateVisibilityAngle((2, 3), (2, 9)))
assertEqual(math.atan2(1, 0), calculateVisibilityAngle((2, 3), (5, 3)))


def getVisibleAstroidCount(coordinate, astroidCoordinates):
    visibilityAngles = []
    for astroidCoordinate in astroidCoordinates:
        if astroidCoordinate != coordinate:
            visibilityAngles.append(calculateVisibilityAngle(coordinate, astroidCoordinate))
    return len(set(visibilityAngles))


assertEqual(2, getVisibleAstroidCount((0, 1), [(0, 1), (0, 4), (1, 2)]))


def getAstroidCoordinateWIthMaximumVisibility(inputMap):
    astroidList = []
    for row in range(len(inputMap)):
        for col in range(len(inputMap[row])):
            if inputMap[row][col] == "#":
                astroidList.append((col, row))
    astroidVisibility = {}
    for astroid in astroidList:
        visibleAstroidCount = getVisibleAstroidCount(astroid, astroidList)
        astroidVisibility[visibleAstroidCount] = astroid
    maxVisibleAstroidCount = max(astroidVisibility.keys())
    return maxVisibleAstroidCount, astroidVisibility[maxVisibleAstroidCount]


assertEqual((8, (3, 4)), getAstroidCoordinateWIthMaximumVisibility([
    ".#..#",
    ".....",
    "#####",
    "....#",
    "...##", ]))
assertEqual((33, (5, 8)), getAstroidCoordinateWIthMaximumVisibility([
    "......#.#.",
    "#..#.#....",
    "..#######.",
    ".#.#.###..",
    ".#..#.....",
    "..#....#.#",
    "#..#....#.",
    ".##.#..###",
    "##...#..#.",
    ".#....####", ]))
assertEqual((35, (1, 2)), getAstroidCoordinateWIthMaximumVisibility([
    "#.#...#.#.",
    ".###....#.",
    ".#....#...",
    "##.#.#.#.#",
    "....#.#.#.",
    ".##..###.#",
    "..#...##..",
    "..##....##",
    "......#...",
    ".####.###.", ]))
assertEqual((41, (6, 3)), getAstroidCoordinateWIthMaximumVisibility([
    ".#..#..###",
    "####.###.#",
    "....###.#.",
    "..###.##.#",
    "##.##.#.#.",
    "....###..#",
    "..#.#..#.#",
    "#..#.#.###",
    ".##...##.#",
    ".....#.#..", ]))
assertEqual((210, (11, 13)), getAstroidCoordinateWIthMaximumVisibility([
    ".#..##.###...#######",
    "##.############..##.",
    ".#.######.########.#",
    ".###.#######.####.#.",
    "#####.##.#.##.###.##",
    "..#####..#.#########",
    "####################",
    "#.####....###.#.#.##",
    "##.#################",
    "#####.##.###..####..",
    "..######..##.#######",
    "####.##.####...##..#",
    ".#####..#.######.###",
    "##...#.##########...",
    "#.##########.#######",
    ".####.#.###.###.#.##",
    "....##.##.###..#####",
    ".#.#.###########.###",
    "#.#.#.#####.####.###",
    "###.##.####.##.#..##", ]))

print(getAstroidCoordinateWIthMaximumVisibility([
    "##.###.#.......#.#....#....#..........#.",
    "....#..#..#.....#.##.............#......",
    "...#.#..###..#..#.....#........#......#.",
    "#......#.....#.##.#.##.##...#...#......#",
    ".............#....#.....#.#......#.#....",
    "..##.....#..#..#.#.#....##.......#.....#",
    ".#........#...#...#.#.....#.....#.#..#.#",
    "...#...........#....#..#.#..#...##.#.#..",
    "#.##.#.#...#..#...........#..........#..",
    "........#.#..#..##.#.##......##.........",
    "................#.##.#....##.......#....",
    "#............#.........###...#...#.....#",
    "#....#..#....##.#....#...#.....#......#.",
    ".........#...#.#....#.#.....#...#...#...",
    ".............###.....#.#...##...........",
    "...#...#.......#....#.#...#....#...#....",
    ".....#..#...#.#.........##....#...#.....",
    "....##.........#......#...#...#....#..#.",
    "#...#..#..#.#...##.#..#.............#.##",
    ".....#...##..#....#.#.##..##.....#....#.",
    "..#....#..#........#.#.......#.##..###..",
    "...#....#..#.#.#........##..#..#..##....",
    ".......#.##.....#.#.....#...#...........",
    "........#.......#.#...........#..###..##",
    "...#.....#..#.#.......##.###.###...#....",
    "...............#..#....#.#....#....#.#..",
    "#......#...#.....#.#........##.##.#.....",
    "###.......#............#....#..#.#......",
    "..###.#.#....##..#.......#.............#",
    "##.#.#...#.#..........##.#..#...##......",
    "..#......#..........#.#..#....##........",
    "......##.##.#....#....#..........#...#..",
    "#.#..#..#.#...........#..#.......#..#.#.",
    "#.....#.#.........#............#.#..##.#",
    ".....##....#.##....#.....#..##....#..#..",
    ".#.......#......#.......#....#....#..#..",
    "...#........#.#.##..#.#..#..#........#..",
    "#........#.#......#..###....##..#......#",
    "...#....#...#.....#.....#.##.#..#...#...",
    "#.#.....##....#...........#.....#...#...",
]))
